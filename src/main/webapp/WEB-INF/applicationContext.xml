<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cxf="http://cxf.apache.org/core"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="  
	http://cxf.apache.org/bindings/soap
    http://cxf.apache.org/schemas/configuration/soap.xsd
    http://cxf.apache.org/core
    http://cxf.apache.org/schemas/core.xsd  
    http://cxf.apache.org/jaxws   
    http://cxf.apache.org/schemas/jaxws.xsd
    http://cxf.apache.org/jaxrs
    http://cxf.apache.org/schemas/jaxrs.xsd
	http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.1.xsd">
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-xml.xml" />

	<cxf:bus>
		<cxf:inInterceptors>
			<!-- The ReceiveInterceptor is configured with annotation and only exists in the ISOAPService -->
			<!-- <bean class="wenyu.test.interceptors.MyReceiveInterceptor"/> -->
			<bean class="wenyu.learning.Interceptors.MyReadInterceptor" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<bean class="wenyu.learning.Interceptors.MySendInterceptor" />
		</cxf:outInterceptors>
	</cxf:bus>


	<!-- SOAP Service Configuration -->
	<!-- About jaxws:server vs. jaxws:endpoing
		  1. they are all for the server side configuration.
		  2. jaxws:endpoint is coming from JAXWS API, and it is used to
		     configure the org.apache.cxf.jaxws.EndpointImpl which extends
		     javax.xml.ws.Endpoint.
		  3. jaxws:server is for configuring the JaxWsServerFactoryBean, which is
		     coming from the Xfire API. 
	 -->
	<bean id="soapServiceBean" class="wenyu.learning.SOAP.Service.CodeFirst.SOAPServiceImpl" />
	<jaxws:server id="soapService" address="/soapService">
		<jaxws:serviceBean>
			<ref bean="soapServiceBean" />
		</jaxws:serviceBean>
	</jaxws:server>
	
	<jaxws:endpoint id="soapServiceEndpoint" implementor="wenyu.learning.SOAP.Service.CodeFirst.SOAPServiceImpl" address="/soapServiceEndpoint" />
	<jaxws:endpoint id="contractsoapServiceEndpoint" implementor="wenyu.learning.SOAP.Service.ContractFirst.SoapServiceSoapBindingImpl" address="/contractsoapServiceEndpoint" />


	<!-- RESTful Service Configuration -->
	<bean id="restfulServiceBean" class="wenyu.learning.RESTful.Service.RestfulServiceImpl" />
	<jaxrs:server id="restfulService" address="/restfulService">
		<jaxrs:features>
			<cxf:logging />
		</jaxrs:features>
		<jaxrs:serviceBeans>
			<ref bean="restfulServiceBean" />
		</jaxrs:serviceBeans>
		
	</jaxrs:server>
	
	<!-- Following service specified the provider -->
	<bean id="restfulServiceWithProviderBean" class="wenyu.learning.RESTful.Service.RestfulServiceWithProviderImpl" />
	<bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
		<property name="marshallerProperties" ref="propertiesMap" />
		<property name="consumeMediaTypes" ref="consumesTypes" />
		<property name="produceMediaTypes" value="producesTypes" />
	</bean>
	<util:list id="producesTypes">
		<value>application/xml</value>
	</util:list>
	<util:list id="consumesTypes">
		<value>application/xml</value>
		<value>text/xml</value>
		<value>text/plain</value>
	</util:list>
	<util:map id="propertiesMap">
		<entry key="jaxb.formatted.output">
			<value type="java.lang.Boolean">true</value>
		</entry>
	</util:map>
	<jaxrs:server id="restfulWithProviderService" address="/restfulServiceWithProvider">
		<jaxrs:serviceBeans>
			<ref bean="restfulServiceWithProviderBean" />
		</jaxrs:serviceBeans>
		<jaxrs:providers>
			<ref bean="jaxbProvider" />
		</jaxrs:providers>
	</jaxrs:server>
</beans>